import random

import factory
from django.db import IntegrityError
from factory.django import DjangoModelFactory

from authentication.tests.factories import UserFactory
from coupons.models import Coupon, Redemption

coupons_options = [
    ("MONSTERDASEG", "Uma bebida Monster gr√°tis na Segundona"),
    ("CAFEDOCEO", "Caf√© premium liberado por conta do CEO (s√≥ hoje!)"),
    ("UBERTOFIM", "Uber para casa no fim do sprint (sem julgamentos)"),
    ("PIZZADODEV", "Pizza gr√°tis para bugs acima de 500 linhas"),
    ("IFOODCHORA", "R$25 de Ifood porque hoje ningu√©m cozinhou"),
    ("CODGAMERPASS", "1 m√™s de Game Pass porque codar cansa a alma"),
    ("CAFELOOP", "Caf√© infinito at√© voc√™ sair do loop"),
    ("ALMOCOFANTASMA", "Almo√ßo gr√°tis quando o deploy falha e ningu√©m sabe por qu√™"),
    ("SUSHINAFRIA", "Sushi congelado s√≥ pra quem ficou at√© depois das 20h"),
    ("BURGERDABRABA", "Combo do Brabo liberado pra quem mergeia sem conflito"),
    ("DESCONTOBUG", "Desconto para cada bug resolvido antes do meio-dia"),
    ("TAXIDODEV", "Corrida de t√°xi gr√°tis ap√≥s call traum√°tica"),
    ("HAPPYHOURQA", "Vale-bebida por aguentar o QA encontrando tudo"),
    ("PASTELDEPROD", "Pastel na faixa pra reuni√£o que podia ser e-mail"),
    ("SORVETEDOTESTE", "Sorvete liberado quando o teste finalmente passa"),
    ("GASOLINADEV", "Cupom simb√≥lico: 'Combust√≠vel moral' p√≥s deploy"),
    ("PAUSAPOMODORO", "Vale-snack pra cada Pomodoro cumprido com honra"),
    ("MERGESEMDRAMA", "Benef√≠cio simb√≥lico: voc√™ conseguiu mergear sem tretar"),
    ("ZAPZAPREUNIAO", "Cupom de lanche se voc√™ mutou o mic a tempo na daily"),
    ("LANCHEOFFBYONE", "Vale-lanche pra quem sofreu com o erro off-by-one"),
    ("DEPLOYNASEXTA", "Cupom de coragem: voc√™ fez deploy na sexta-feira üò±"),
    ("SQLDABOA", "Pizza liberada para a query que rodou de primeira"),
    ("ZOMBIESTANDUP", "Caf√© + p√£o de queijo pra quem abriu o olho na daily"),
    ("PIXDOCEO", "PIX emocional do CEO (mentira, mas vale um snack)"),
    ("CODENOLIMBO", "Vale energ√©tico pra c√≥digo que ningu√©m entende"),
    ("RAMENDEBUG", "Lamen gourmet por cada bug que voc√™ n√£o causou (provavelmente)"),
    ("CHURRASDOFEEDBACK", "Cupom por sobreviver √† 1:1 sem surtar"),
    ("BRIEFDABRABA", "Almo√ßo free se voc√™ entendeu o briefing de primeira"),
    ("CAFESEMIF", "Caf√© extra por cada `if` removido no refactor"),
    ("NAOTEMBUG", "Snack misterioso: funciona na minha m√°quina‚Ñ¢"),
    ("FOCOTOTAL", "√Ågua com g√°s e moral elevada pra foco total no sprint"),
    ("DOCECRITICAL", "Doce de consolo por bug em produ√ß√£o no fim de semana"),
    ("CATCHERXPERT", "Refri liberado por capturar uma exception como um ninja"),
    ("REVIEW5ESTRELAS", "Cupom gourmet pra review sem apontamento"),
    ("BACKLOGPIZZA", "Lanche premiado por limpar 5 cards do backlog"),
    ("SPRINTFUGIDA", "Bolacha + sumo: pra quem tentou fugir da retro"),
    ("MUTEOPORTA", "Caf√© gr√°tis se voc√™ mutou o microfone antes do cachorro latir"),
    ("BONUSKAFKA", "Shot de expresso pra cada t√≥pico Kafka que voc√™ entende"),
    ("FIXEIBONITO", "Cookie dourado por resolver um bug com eleg√¢ncia"),
    ("STANDUPEXPRESS", "Lanche premiado por standup de menos de 2 minutos"),
    (
        "REUNI√ÉOQUEPODIA",
        "Um caf√© gr√°tis por cada reuni√£o que podia ser um e-mail (limite: infinito)",
    ),
    ("BUGFEATURE", "Cupom de chocolate por convencer algu√©m que √© feature, n√£o bug"),
    ("NAOMAISNEMMENOS", "√Ågua da casa por seguir requisitos 'claramente amb√≠guos'"),
    ("SOBREVIVISPRINT", "Snack por sobreviver ao sprint com o time 'focado' no WhatsApp"),
    ("NAOMEXENOSEUCOD", "Bala de menta por n√£o reescrever o c√≥digo legado (ainda)"),
    ("CODOPRODCEO", "Ch√° calmante ap√≥s push do CEO direto em produ√ß√£o"),
    ("COMITESEMTESTE", "Mini doce por aprovar PR sem testes e sem culpa"),
    ("FEEDBACKCORTES", "Coxinha emocional por feedback 'construtivo' com passivo-agressivo"),
    ("BRIEFINGQUEM", "Caf√© gr√°tis pra quem descobriu o briefing durante o deploy"),
    ("HOTFIXDAALEGRIA", "Red Bull por fazer hotfix √†s 23h e sorrir √†s 9h na daily"),
    ("ZAPDURANTESTAND", "Bolacha por responder grupo da fam√≠lia no meio da standup"),
    ("REFACTORINFAME", "Chiclete sabor arrependimento por mexer em m√©todo de 300 linhas"),
    ("COMMITDEUS", "√Ågua com g√°s premium por commit com mensagem: 'ajustes gerais'"),
    ("ESCOPODINAMICO", "Salaminho premiado por lidar com escopo 'mutante' em tempo real"),
    ("QAOUDEUS", "Recompensa simb√≥lica por testes rodando direto em produ√ß√£o"),
    ("TRAVOUEDEUS", "Balinha por usar a cl√°ssica solu√ß√£o: 'reinicia e v√™ se volta'"),
    ("NAOSEIALINEA", "Kit sobreviv√™ncia ap√≥s explicar para a linha de neg√≥cios o que √© API"),
    ("JUNTOEMISTURADO", "Refri por deploy, debug e daily acontecendo simultaneamente"),
    ("FEITOEMPROD", "Trof√©u moral: se funcionou em produ√ß√£o, t√° validado"),
    ("SINDICATODODEV", "Biscoito de direito trabalhista simb√≥lico por c√≥digo escrito p√≥s 22h"),
]


class CouponFactory(DjangoModelFactory):
    class Meta:
        model = Coupon

    code = factory.LazyAttribute(lambda _: random.choice(coupons_options)[0])
    description = factory.LazyAttribute(lambda o: dict(coupons_options)[o.code])
    max_redemptions = factory.Faker("random_int", min=1, max=10)
    available = factory.Faker("boolean", chance_of_getting_true=75)

    @classmethod
    def _create(cls, model_class, *args, **kwargs):
        max_attempts = 10
        for attempt in range(max_attempts):
            try:
                instance = super()._create(model_class, *args, **kwargs)
                return instance
            except IntegrityError as e:
                if attempt == max_attempts - 1:
                    raise
                # Gera um novo c√≥digo aleat√≥rio
                kwargs["code"] = random.choice(coupons_options)[0]
                kwargs["description"] = dict(coupons_options)[kwargs["code"]]
                continue


class RedemptionFactory(DjangoModelFactory):
    class Meta:
        model = Redemption

    user = factory.SubFactory(UserFactory)
    coupon = factory.SubFactory(CouponFactory)
